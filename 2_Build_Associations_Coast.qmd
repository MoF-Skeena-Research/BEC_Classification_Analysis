---
title: "Build Associations for LMH77"
author: "William H MacKenzie"
date: "06/09/2024"
format: 
  pdf: 
    documentclass: scrartcl
    papersize: letter
editor: source
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
require(tidyverse)
require(DBI)
require(data.table)
require(cluster)
require(dendextend)
require(dynamicTreeCut)
require(gtable)
require(gtsummary)
require(colorspace)
require(openxlsx)
require(tictoc)
require(labdsv)
require(indicspecies)
require(Polychrome)
require(ggdendro)
require(purrr)
require(ggplotify)
require(grid)
require(data.tree)
set.seed(1279)
source("./_functions/_bec_dist.R")
source("./_functions/_bec_dist_matrix.R")
source("./_functions/_lump_species.R")
source("./_functions/_lump_species2.R")
source("./_functions/_create_su_vegdata.R")
source("./_functions/_create_analysis_vegsum.R")
source("./_functions/_TabletoTree.R")
source("./_functions/_TreetoTable.R")
source("./_functions/_add_vars.R")
source("./_functions/_do_pairwise.R")
source("./_functions/_create_diagnostic_veg.R")
source("./_functions/_return_similar_pairs.R")
source("./_functions/_read_sppmaster.R")
source("./_functions/_combined_su.R")
source("./_functions/_create_veg_sum.R")
source('./_functions/_create_veg_sum_all.R')
source('./_functions/_build_species_ordering.R')
source('./_functions/_format_veg_table.R')
source('./_functions/_format_veg_table2.R')
source('./_functions/_encode_veg_sum.R')
source('./_functions/_create_dendro.R')
source('./_functions/_create_dendro_all.R')
source('./_functions/_create_dendro_bybgc.R')
source('./_functions/_draw_dendro_split.R')
source('./_functions/_cluster_groups.R')
source('./_functions/_TabletoTree.R')
```

#### Read in data

Vegetation data is read in from saved .RDS file generated from the BECMaster cleaning scripts. A compiled SU table is build from all BGC \_SU tables stored in the coast guide Vpro database. Taxonomy is read in from the species taxonomy database. A species lumping code table is read in from the Correlation2_Spp_lump.accdb database and the vegetation data is lumped using the lump_species function.

```{r load data, echo=FALSE}
veg.dat <- readRDS("./clean_data/Analysis_BECMaster_Veg.rds") ### named veg.dat
taxon.all <- read_sppmaster()
taxon.lifeform <- taxon.all %>%
  filter(Codetype == "U" | Codetype == "X" | Codetype == "D") %>%
  dplyr::select(Code, ScientificName, EnglishName, Lifeform) %>%
  distinct()
 tree_seedlings <- taxon.lifeform %>% filter(Lifeform %in% c("1", "2")) %>% mutate(Code = paste0(Code, "D")) %>% pull(Code)
trees <- taxon.lifeform %>% filter(Lifeform %in% c("1", "2")) %>% pull(Code)
veglump <- dbConnect(
  odbc::odbc(),
  .connection_string = "Driver={Microsoft Access Driver (*.mdb, *.accdb)}; DBQ=D:/BC_Correlation2_Vpro_2023/Correlation2_Spp_lump.accdb;")
lump <- dbReadTable(veglump, "CorrelationII_Lump")
dbDisconnect(veglump)
veg.dat2 <- lump_species(vegdata = veg.dat, lump, use.subtaxa = FALSE)
#db <- "D:/BC_Correlation2_Vpro_2023/CoastGuide_Forested.accdb"
db <- "D:/BC_Correlation2_Vpro_2023/Coast_Association_Exercise.accdb"
su <- combined_su(db)
su <- su %>%
  filter(!grepl('101a.2|101b.2|low|-S|add|nudum|poor|yc|_W|_F|ys|moved|X|unplaced|support', SiteUnit))  %>% arrange(SiteUnit)
#   filter(grepl('01', SiteUnit)) ###zonal specific
su2 <- su %>% select(-SiteUnit.orig) %>%
filter(!bgc %in% c('CWHvh3', 'CWHwh1', 'CWHwh2', 'CWHvh3', 'MHwh'))###BGC specific|CWHms

bgc.unique <- unique(su2$bgc)
ss.unique <- su2 %>% select(SiteUnit, bgc) %>% distinct
ss.count <- length(ss.unique$SiteUnit)
 becmaster <- dbConnect(odbc::odbc(), .connection_string = "Driver={Microsoft Access Driver (*.mdb, *.accdb)}; DBQ=D:/BECMaster/BECMaster_fixing.accdb;")
plot.env <- dbReadTable(becmaster, "BECMaster_fixing_Env")
dbDisconnect(becmaster)
bgc.units<- dbConnect(
  odbc::odbc(),
  .connection_string = "Driver={Microsoft Access Driver (*.mdb, *.accdb)}; DBQ=D:/OneDrive - Government of BC/BECdb_Working/BECdb_ver13_2024.accdb;")
bgcv12 <- dbReadTable(bgc.units, "tblBGC_UnitsWorkingandArchive")
dbDisconnect(bgc.units)
bgcv13 <- bgcv12 %>% filter(is.na(VersionRetired)) %>% select(BGC_NoSpace, SiteClassificationStatus)
```

```{r interior site units, echo=FALSE}
# db <- "D:/BC_Correlation2_Vpro_2023/CoastGuide_Forested.accdb"
# su <- combined_su(db)
# db <- "D:/BC_Correlation2_Vpro_2023/Columbia_FG_draft.accdb"
# su2 <- combined_su(db)
# db <- "D:/BC_Correlation2_Vpro_2023/published_sorts/Cariboo_LMH39_Sorts.accdb"
# su3 <- combined_su(db)
# db <- "D:/BC_Correlation2_Vpro_2023/published_sorts/KootenayBoundary_Sorts.accdb"
# su4 <- combined_su(db)
# db <- "D:/BC_Correlation2_Vpro_2023/published_sorts/Skeena_LMH26_Sorts.accdb"
# su5 <- combined_su(db)
# db <- "D:/BC_Correlation2_Vpro_2023/published_sorts/ThompsonOK_Sorts.accdb"
# su6 <- combined_su(db)

#su <- rbind(su, su2, su3, su4, su5, su6)
#xx <- su %>% filter(PlotNumber == "K780448")
# su <- su %>%
#   filter(!grepl('101a.2|101b.2|low|-S|add|nudum|poor|yc|_W|_F|ys|moved|X|unplaced', SiteUnit))
# su <- su %>% select(-SiteUnit.orig) %>% mutate(SiteUnit = str_replace(SiteUnit, "b$|a$", "")) %>% distinct() %>% mutate(zone = str_extract(bgc, "([A-Z]+)"))
# bgc.unique <- su %>% distinct(bgc)
# no.su <- anti_join(bgcv13, bgc.unique, by = c("BGC_NoSpace" = "bgc")) %>% filter(!SiteClassificationStatus == "none")
# ###write combined SU to database
# # master_su <- dbConnect(odbc::odbc(), .connection_string = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};
# # DBQ=D:/BC_Correlation2_Vpro_2023/All_BC_Correlation.accdb;")
# # dbWriteTable(master_su, "All_BC_zonals2_SU",  su, overwrite = TRUE, batch_rows = 1)
# # dbDisconnect(master_su)
# xx <- su %>% filter(SiteUnit == "IDFww1_101.2")
# su <- su %>%
# filter(!grepl('CWHvh3|CWHwh1|CWHwh2|CWHvh3|MHwh', SiteUnit))###BGC specific|CWHms


```

### Evaluate site series within each BGC

1.  Identify site series that have fewer than 5 plots (difficult to quantitatively analyse)

2.  Identify site series that have low diagnostic potential.

3.  Compare site series within each BGCs to identify site series below the minimal threshold to separate

Some units with few plots or low diagnostics fall out as singles in the first pass cluster analysis. These are reviewed and merging rules applied before re-running the cluster analysis.

```{r merge reviewed singles, echo=FALSE}
merge <- fread("./clean_data/MergeUnits.csv") %>% as.data.table
setDT(su2)[merge, SiteUnit := mergedUnit, on = "SiteUnit"]

```

```{r build pair.wise similarity matrix, echo=FALSE}

key.site.indicators <- c("PICESIT", "POPUTRI", "LYSIAME", "GAULSHA", "OPLOHOR", "ELLIPYR","ATHYFIL", "RUBUSPE", "EQUIARV", "GYMNDRY", "VALESIT", "CASSMER", "LUETPEC", "POLYMUN", "STRUSPI", "RHODGRO", "EMPENIG")#,  "TIARELLA", "DRYOEXP" )
reduced.exceptions <- c("SPHAGNUM", "CLADONIA", "CLADINA", "RACOMITR", "MNIUM")
# reduced.lifeforms = c(1,2)
reduced.lifeforms <- c(9, 10, 11)
### select units to run
#su2 <- su
tic()
vegsum.pairs <- do_pairwise(veg.dat2,
  su = su2, minimportance = 0.1, minconstancy = 60,
  noiseconstancy = 10,
  minplots = 1,  minor = 1,
  use.ksi = TRUE, ksi = key.site.indicators, ksi.value = 1.5,
  reduce.lifeform = TRUE, reduced.lifeforms = reduced.lifeforms, reduction = .1,
  reduced.exceptions = reduced.exceptions
)
toc()
xx <- vegsum.pairs %>%
  filter(Unit1 == "CWHws2_112a", Unit2 == "CWHws2_112b")

unit.compare <- vegsum.pairs %>%
  select(Unit1, Unit2, BEC.sim.min, BEC.sim.mean , BEC.sim.max, diff.ratio.x, diff.ratio.y, diff.ratio, nplots.x, nplots.y, unit.diag.sum.x, unit.diag.sum.y) %>% filter(nplots.x>0) %>% mutate(metric.diff = BEC.sim.max - BEC.sim.min) %>%
 distinct()
unit.compare$bgc1 <- stringr::word(unit.compare$Unit1, 1, sep = "\\_")
unit.compare$bgc2 <- stringr::word(unit.compare$Unit2, 1, sep = "\\_")

yy <- vegsum.pairs %>% 
  select(Unit1, Unit2, Species, diagnostic.potential.x, diagnostic.potential.y, diff.pts.x, diff.pts.y, sum.shared.diag,diff.tot.x, diff.tot.y,  diff.ratio.x, diff.ratio.y, BEC.sim.min,BEC.sim.mean) %>% 
  filter(Unit1 == "CWHws2_101", Unit2 == "CWHws2_110")
db <- "D:/BC_Correlation2_Vpro_2023/CoastGuide_Forested.accdb"
coast.units <- combined_su(db) %>% select(SiteUnit) %>% distinct
 dis.matrix <- bec_dist_matrix(unit.compare, distance = "BEC.sim.min") %>% as.data.frame %>% rownames_to_column("SiteUnit")
 # coast.interior <- dis.matrix %>% filter(SiteUnit %in% coast.units$SiteUnit) %>%
 #   pivot_longer(-SiteUnit, names_to = "SiteUnit2", values_to = "distance") %>%
 #   filter(SiteUnit != SiteUnit2) %>%
 #   filter(distance < 0.2) %>%
 #   filter(!SiteUnit2 %in% coast.units$SiteUnit)

```

```{r site series with too few plots, echo=FALSE}
#| label: tab-too-few-plots
#| fig-cap: "Site Units with Fewer than 5 Plots"
#| warning: false
#| fig-align: "left"

compared <- unit.compare
ss_too.few <- compared %>%
  select(Unit1, nplots.x) %>% 
  filter(nplots.x < 6) %>% 
  rename("Number of Plots" = nplots.x, "Site Unit" = Unit1) %>% 
  distinct()
# low.num <- gt::as_gtable(gt::gt(ss_too.few) %>% gt::fmt_number(decimals = 0)|> gt::tab_options(table.font.size = 10), plot = TRUE)

gt::gt(ss_too.few) %>% gt::fmt_number(decimals = 0)|> gt::tab_options(table.font.size = 10)
```

```{r site series with low diagnostic potential, echo=FALSE}
#| label: tab-low-diagnostic
#| fig-cap: "Site Units with Low Diagnostic Potential"
#| warning: false
#| fig-align: "left"
ss_low.diag <- compared %>%
  select(Unit1, unit.diag.sum.x)  %>% 
  filter(unit.diag.sum.x < 30) %>% 
  rename("Diagnostic Potential" = unit.diag.sum.x, "Site Unit" = Unit1) %>%
  distinct()
# low.diag.pot <- gt::as_gtable(gt::gt(ss_low.diag) %>% gt::fmt_number(decimals = 2)|> gt::tab_options(table.font.size = 10), plot = TRUE)
gt::gt(ss_low.diag) %>% gt::fmt_number(decimals = 2)|> gt::tab_options(table.font.size = 10)
# require(gridExtra)
# grid.arrange(low.num, low.diag.pot, ncol = 2)
```

## Dendrogram of cluster analysis for all units

The dendrogram is an approximate representation of the similarity matrix. It is constructed using agglomerative hierarchical clustering which merges site units from the bottom up.

The green line represents the dissimilarity threshold for an association. Currently set at 20% but some ; site unit 'leaves' to the right of this threshold will fall under the same association in the hierarchy.

Splits between the association threshold and the red minimum threshold are subassociation level divisions.

Any splits to the right of the red line should be considered for merging into the same site series.

```{r cluster analysis, echo=FALSE}
#dendro_hc <- create_dendro_all(unit.compare)

#bgc.unique <- c("CDFmm", "CWHvm3")
# for (bgc.choose in bgc.unique){
#   create_dendro_bybgc(bgc.choose, unit.compare)
# }
```

#### Draw dendrograms of branches below the alliance threshold.

```{r split dendrogram, echo=FALSE}
unit.few <- unit.compare %>% filter(nplots.x < 10)  %>% select(Unit1, nplots.x) %>% distinct
unit.simple <- unit.compare %>% filter(unit.diag.sum.x < 30)  %>% select(Unit1, unit.diag.sum.x) %>% distinct
xx <- unit.compare %>% filter(Unit1 %in% unit.few$SiteUnit)
unit.compare2 <- unit.compare %>%  mutate(Unit1.new = ifelse(Unit1 %in% unit.few$Unit1, paste0(Unit1,"-nplot"), Unit1))
unit.compare2 <- unit.compare2 %>%  mutate(Unit2.new = ifelse(Unit2 %in% unit.few$Unit1, paste0(Unit2,"-nplot"), Unit2))      
unit.compare2 <- unit.compare2 %>%  mutate(Unit1.new = ifelse(Unit1.new %in% unit.simple$Unit1, paste0(Unit1.new,"-lowdiag"), Unit1.new))
unit.compare2 <- unit.compare2 %>%  mutate(Unit2.new = ifelse(Unit2.new %in% unit.simple$Unit1, paste0(Unit2.new,"-lowdiag"), Unit2.new))
unit.compare2 <- unit.compare2 %>% mutate(Unit1 = Unit1.new, Unit2 = Unit2.new) %>% 
  select(Unit1, Unit2, BEC.sim.min) 
cut.level <- 0.4
singles <- draw_dendro_split(unit.compare2, cut.level=cut.level)

```

#### Report units that are singles below the association threshold

```{r tables of singles units, echo=FALSE}
singles.poor <- as.data.frame(singles) %>% filter(grepl('nplot|lowdiag', SiteUnit))
singles.good <- as.data.frame(singles) %>% filter(!grepl('nplot|lowdiag', SiteUnit))

gt::gt(singles.good) %>%
  gt::tab_header(
    title = paste0(gt::md("Units ungrouped at cut.level = "), cut.level),
    subtitle = gt::md("*Units with sufficient plots and diagnostics*")
  )  %>%
  gt::tab_options(
   table.font.size = gt::px(10)
  )
gt::gt(singles.poor) %>%
  gt::tab_header(
    title = paste0(gt::md("Units ungrouped at cut.level = "), cut.level),
    subtitle = gt::md("*Units with deficient plots and diagnostics*")
  )  %>%
  gt::tab_options(
    table.font.size = gt::px(10)
  )


```

#### 

```{r pull associations from dendrogram at cut.level, echo=FALSE}

assocs <- cluster_groups(unit.compare, cut.level = 0.2, minclus = 0, group.label = "Association.clst")
assocs <- full_join(assocs, merge ) %>% filter(!SiteUnit %in% mergedUnit) %>% 
  mutate(Association.clst = ifelse(!is.na(mergedUnit), mergedUnit, Association.clst)) %>% 
  mutate(mergedUnit = ifelse(is.na(mergedUnit), SiteUnit, mergedUnit)) %>% mutate(Association.clst = paste0("assoc-", Association.clst))
alliances <- cluster_groups(unit.compare, cut.level = 0.4, minclus = 0, group.label = "Alliance.clst")
alliances  <- left_join(assocs, alliances ,  by = c("mergedUnit"="SiteUnit"), keep = TRUE) %>% select(Alliance.clst, Association.clst, SiteUnit.x, mergedUnit)%>% mutate(Alliance.clst = paste0("all-", Alliance.clst))
orders <- cluster_groups(unit.compare, cut.level = 0.8, minclus = 0, group.label = "Order.clst")
orders  <- left_join(alliances, orders,  by = c("mergedUnit"="SiteUnit"), keep = TRUE) %>% select(-SiteUnit, Order.clst, Alliance.clst, Association.clst, SiteUnit.x, mergedUnit)%>% mutate(Order.clst = paste0("order-", Order.clst))
classes <- cluster_groups(unit.compare, cut.level = .99, minclus = 0, group.label = "Class.clst")
classes  <- left_join(orders,classes,  by = c("mergedUnit"="SiteUnit"), keep = TRUE) %>% select(SiteUnit.x, Association.clst, Alliance.clst, Order.clst, Class.clst, mergedUnit)%>% mutate(Class.clst = paste0("class-", Class.clst))

subassocs <- cluster_groups(unit.compare, cut.level = 0.07, minclus = 0, group.label = "Subassociation.clst")
subassocs <- full_join(subassocs, merge ) %>% filter(!SiteUnit %in% mergedUnit) %>% 
  mutate(Subassociation.clst = ifelse(!is.na(mergedUnit), mergedUnit, Subassociation.clst)) %>% 
  mutate(mergedUnit = ifelse(is.na(mergedUnit), SiteUnit, mergedUnit)) %>% mutate(Subassociation.clst = paste0("subass-", Subassociation.clst))
allunits <-  left_join(classes, subassocs,  by = c("mergedUnit"="SiteUnit"), keep = TRUE) %>% select(SiteUnit.x, Subassociation.clst, Association.clst, Alliance.clst, Order.clst, Class.clst)#%>% mutate(Class.clst = paste0("class-", Class.clst))
su.temp <- su %>% select(PlotNumber, SiteUnit.orig, SiteUnit)
su3 <- left_join(su.temp, su, by = "PlotNumber")

#, by = c("SiteUnit" = "SiteUnit.y")) %>% select(PlotNumber, SiteUnit, Association, Alliance, Order, Class)
#singles <- assocs %>% filter(Association == 0)
## if minclus = 2 then group 0 are singles for review
## need to add back in the manually grouped site units
## need to change the accepted singles from zero to other association number if for review
# db <- "D:/BC_Correlation2_Vpro_2023/CoastGuide_Forested.accdb"
# su.coast <- combined_su(db)
# su.coast <- su.coast %>%
#   filter(!grepl('101a.2|101b.2|low|-S|add|nudum|poor|yc|_W|_F|ys|moved|X|unplaced', SiteUnit))
# su.coast <- su.coast %>% mutate(SiteUnit = str_replace(SiteUnit, "b$|a$", "")) %>% distinct()
# su.coast <- su.coast %>% filter(!bgc %in% c('CWHvh3', 'CWHwh1', 'CWHwh2', 'CWHvh3', 'MHwh'))
coast.units.su <- left_join(allunits, su3,  by = c("SiteUnit.x" = "SiteUnit.x")) %>% select(PlotNumber, SiteUnit.x, SiteUnit.orig.x, Subassociation.clst,Association.clst, Alliance.clst, Order.clst, Class.clst, bgc) %>% rename(SiteUnit = SiteUnit.orig.x)
# interior.units <- orders %>% filter(!Association == 0) %>%
#    filter(!SiteUnit.y %in% coast.units$SiteUnit) %>%
#   filter(Association %in% coast.units$Association)%>%
#   left_join(su) %>%
#   select(PlotNumber, SiteUnit, Association, Alliance, Order)
#coast.units.su <- rbind(coast.units, interior.units)
coast.units <- coast.units.su %>% select(-PlotNumber) %>% distinct
fwrite(coast.units.su, "./clean_data/Association_Units_v1.csv")
fwrite(coast.units, "./clean_data/Coast_Hierarchical_Clusters_v1_clean.csv")

```

#### Export vegetation summary tables of site units by prospective associations

```{r build veg guide summary and export to excel, echo = FALSE, warning=FALSE, message=FALSE}
# require(openxlsx)
# require(tictoc)
# library(stringr)
# data.path = "D:/OneDrive - Government of BC/GitHub_data"
# author <- "test.assoc2"
# assoc.list <- coast.units %>% filter(!is.na(Association.clst)) %>% group_by(Association.clst) %>% mutate(n=n()) %>% filter(n>2) %>% distinct(Association.clst) %>% pull(Association.clst)
# 
# vegsum.wbk <- createWorkbook()
# for(assoc.choose in assoc.list){
# #assoc.choose = "assoc-13"
# assoc <- coast.units.su %>% filter(Association.clst %in% assoc.choose) %>% select(SiteUnit, Association.clst) %>% mutate(SiteUnit = gsub(" ", "", SiteUnit)) %>% mutate(SiteUnit = str_replace(SiteUnit, "/", "_"))
# su.assoc <- left_join(assoc, su, by = "SiteUnit") %>%  mutate(SiteUnit = str_replace(SiteUnit, "b$|a$", "")) %>% distinct() 
# veg.dat.assoc <- veg.dat2 %>% filter(PlotNumber %in% su.assoc$PlotNumber)
# # vegsum.wbk <- createWorkbook()
# # #bgc.choose = "CDFmmtab2"
# # #for(bgc.choose in bgc.list){
# vegSum <-
#   create_veg_sum_all(vdat = veg.dat.assoc, siteUnits = su.assoc, strata.by = "Lifeform")
# 
# indic.order <- build_species_ordering_hier(vdat = veg.dat.assoc, vsum = vegSum, code.lump=lump, siteUnits = su.assoc, hier.level = "Association.clst")
# veg.sum.table <- format_veg_table2(vsum = vegSum, spp=taxon.lifeform)
# openxlsx::addWorksheet(vegsum.wbk, sheetName = assoc.choose)
# openxlsx::writeData(vegsum.wbk, sheet = assoc.choose, veg.sum.table) 
# }
# 
# saveWorkbook(vegsum.wbk, paste0("./vegsum.tables/LMH77_draft_assoc_tables_", author, ".xlsx"), overwrite = TRUE)

```

```{r build veg guide summary for alliances, echo = FALSE, warning=FALSE, message=FALSE}
# require(openxlsx)
# require(tictoc)
# library(stringr)
# data.path = "D:/OneDrive - Government of BC/GitHub_data"
# author <- "test.alliance2"
# #coast.units <- coast.units %>% mutate(Alliance.clst = Alliance.clst)
# assoc.list <- coast.units %>% filter(!is.na(Alliance.clst)) %>% group_by(Alliance.clst) %>% mutate(n=n()) %>% filter(n>2, n<15) %>% distinct(Alliance.clst) %>% pull(Alliance.clst)
# 
# vegsum.wbk <- createWorkbook()
# for(assoc.choose in assoc.list){
# #assoc.choose = "all-42"
# assoc <- coast.units.su %>% filter(Alliance.clst %in% assoc.choose) %>% select(SiteUnit, Alliance.clst) %>% mutate(SiteUnit = gsub(" ", "", SiteUnit)) %>% mutate(SiteUnit = str_replace(SiteUnit, "/", "_"))
# su.assoc <- left_join(assoc, su, by = "SiteUnit") %>%  mutate(SiteUnit = str_replace(SiteUnit, "b$|a$", "")) %>% distinct() 
# veg.dat.assoc <- veg.dat2 %>% filter(PlotNumber %in% su.assoc$PlotNumber)
# # vegsum.wbk <- createWorkbook()
# # #bgc.choose = "CDFmmtab2"
# # #for(bgc.choose in bgc.list){
# vegSum <-
#   create_veg_sum_all(vdat = veg.dat.assoc, siteUnits = su.assoc, strata.by = "Lifeform")
# tic()
# indic.order <- build_species_ordering_hier(vdat = veg.dat.assoc, vsum = vegSum, code.lump=lump, siteUnits = su.assoc, hier.level = "Alliance.clst")
# toc()
# veg.sum.table <- format_veg_table2(vsum = vegSum, spp=taxon.lifeform)
# openxlsx::addWorksheet(vegsum.wbk, sheetName = assoc.choose)
# openxlsx::writeData(vegsum.wbk, sheet = assoc.choose, veg.sum.table) 
# }
# 
# saveWorkbook(vegsum.wbk, paste0("./vegsum.tables/LMH77_draft_hierarchy_tables_", author, ".xlsx"), overwrite = TRUE)

```

Merge in hierarchical cluster numbers to BECdb tables to help guide naming of units

```{r add in association code}
# table <- "tblBEC_SiteSeries_LMH77_forest"
# becdb <- dbConnect(odbc::odbc(), .connection_string = "Driver={Microsoft Access Driver (*.mdb, *.accdb)}; DBQ=D:/OneDrive - Government of BC/BECdb_Working/BECdb_ver13_2024.accdb;")
# SS_v13 <- dbReadTable(becdb, table)
# SS_v13_2 <- setDT(SS_v13)[setDT(coast.units), `:=`(Association_Code = Association.clst, Alliance = Alliance.clst, Order = Order.clst, Class = Class.clst), on = c("SS_Label" = "SiteUnit")]
# dbRemoveTable(becdb, table)
# dbWriteTable(becdb, table, SS_v13_2, append = TRUE, batch_rows = 1)
# dbDisconnect(becdb)

```

Convert to a hierarchy structure

```{r to Vpro hierarchy, echo=FALSE}
# coast.hier <- coast.units %>% mutate(Formation = "not_set", Suborder = "", Suball = "" , Subass = "" , Facies = "" , Working = "") %>% rowid_to_column("ID") %>%  select(ID, Formation, Class, Order, Suborder, Alliance, Suball, Association, Subass, Facies, Working, SiteUnit) %>% distinct %>% rename(Assoc = Association) %>%  mutate_if(is.numeric, as.character) %>%  mutate(ID = as.integer(ID)) %>% as.data.table
# levelNames <- c("Formation", "Class", "Order", "Suborder", "Alliance", "Suball", "Assoc", "Subass", "Facies", "Working", "SiteUnit")
# testReverse <- tableToTree(hierWide = copy(test),levelNames) ## convert matrix to tree
# testReverse <-testReverse %>% mutate(Parent = ifelse(Parent == 0, NA, Parent)) %>% distinct(Name, .keep_all = TRUE)
# fwrite(testReverse, "./outputs/UpdatedCoastHierarchy_v13_1.csv")
```
