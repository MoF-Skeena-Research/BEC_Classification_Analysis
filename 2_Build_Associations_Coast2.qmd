---
title: "Build Associations for LMH77"
author: "William H MacKenzie"
date: "06/09/2024"
format:
  typst:
    toc: false
    toc-depth: 1
    toc-title: Contents
    section-numbering: 1.1.1
    columns: 1
editor: source
execute:
  echo: false
  error: false
  warning: false
  message: false
  fig.width: 6
  fig.height: 4
  fig.align: 'center'
  fig.cap: true
  fig.pos: H
  out.width: '100%'
  dev: pdf
  fig.ext: pdf
  cache: false
  fig.retina: 2
  dpi: 600
  fig.asp: 1.5
  fig.path: "./figures/"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
require(tidyverse)
require(DBI)
require(data.table)
require(cluster)
require(dendextend)
require(dynamicTreeCut)
require(gtable)
require(gtsummary)
require(colorspace)
require(openxlsx)
require(tictoc)
require(labdsv)
require(indicspecies)
require(Polychrome)
require(ggdendro)
require(purrr)
require(ggplotify)
require(grid)
require(data.tree)
library(stats)
set.seed(1279)
source("./_functions/_bec_dist.R")
source("./_functions/_bec_dist_matrix.R")
source("./_functions/_lump_species.R")
source("./_functions/_lump_species2.R")
source("./_functions/_create_su_vegdata.R")
source("./_functions/_create_analysis_vegsum.R")
source("./_functions/_TabletoTree.R")
source("./_functions/_TreetoTable.R")
source("./_functions/_add_vars.R")
source("./_functions/_do_pairwise.R")
source("./_functions/_create_diagnostic_veg.R")
source("./_functions/_return_similar_pairs.R")
source("./_functions/_read_sppmaster.R")
source("./_functions/_combined_su.R")
source("./_functions/_create_veg_sum.R")
source('./_functions/_create_veg_sum_all.R')
source('./_functions/_build_species_ordering.R')
source('./_functions/_format_veg_table.R')
source('./_functions/_format_veg_table2.R')
source('./_functions/_encode_veg_sum.R')
source('./_functions/_create_dendro.R')
source('./_functions/_create_dendro_all.R')
source('./_functions/_create_dendro_bybgc.R')
source('./_functions/_draw_dendro_split.R')
source('./_functions/_cluster_groups.R')
source('./_functions/_TabletoTree.R')
source('./_functions/_build_species_ordering_hier.R')
```

# Introduction
This script compares site unit summary vegetation data to identify associations and subassociations within the Coast Forested BGCs. The analysis is based on a agglomerative clustering approach, which groups site units based on their vegetation characteristics.
First we test the separation of zonal sites for proper designation in mapping.

#### Read in data

Vegetation data is read in from saved .RDS file generated from the BECMaster cleaning scripts. 
A compiled SU table is build from all BGC \_SU tables stored in the coast guide Vpro database. 
Taxonomy is read in from the species taxonomy database. 
A species lumping code table is read in from the Correlation2_Spp_lump.accdb database and the vegetation data is lumped using the lump_species function.

```{r load data, echo=FALSE}
veg.dat <- readRDS("./clean_data/Analysis_BECMaster_Veg.rds") ### named veg.dat
taxon.all <- read_sppmaster()
#taxon.all <- read_sppmaster(database = "C:/Users/whmacken/OneDrive/BCSpeciesList/SpeciesTaxonomyMaster.accdb")

taxon.lifeform <- taxon.all %>%
  filter(Codetype == "U" | Codetype == "X" | Codetype == "D") %>%
  dplyr::select(Code, ScientificName, EnglishName, Lifeform) %>%
  distinct()
 tree_seedlings <- taxon.lifeform %>% filter(Lifeform %in% c("1", "2")) %>% mutate(Code = paste0(Code, "D")) %>% pull(Code)
trees <- taxon.lifeform %>% filter(Lifeform %in% c("1", "2")) %>% pull(Code)
veglump <- dbConnect(
  odbc::odbc(),
  .connection_string = "Driver={Microsoft Access Driver (*.mdb, *.accdb)}; DBQ=D:/BC_Correlation2_Vpro_2023/Correlation2_Spp_lump.accdb;")
lump <- dbReadTable(veglump, "CorrelationII_Lump")
dbDisconnect(veglump)
veg.dat2 <- lump_species(vegdata = veg.dat, lump, use.subtaxa = FALSE)
db <- "D:/BC_Correlation2_Vpro_2023/published_sorts/CoastGuide_Forested.accdb"
#db <- "D:/BC_Correlation2_Vpro_2023/Coast_Association_Exercise.accdb"
su <- combined_su(db)
su <- su %>%
  filter(!grepl('101a.2|101b.2|low|-S|add|nudum|poor|yc|_W|_F|ys|moved|X|unplaced|support', SiteUnit))  %>% arrange(SiteUnit)#
#   filter(grepl('01', SiteUnit)) ###zonal specific
su2 <- su %>% select(-SiteUnit.orig) %>%
filter(!bgc %in% c('CWHvh3', 'CWHwh1', 'CWHwh2', 'CWHvh3', 'MHwh'))###BGC specific|CWHms

bgc.unique <- unique(su2$bgc)
ss.unique <- su2 %>% select(SiteUnit, bgc) %>% distinct
ss.count <- length(ss.unique$SiteUnit)
 becmaster <- dbConnect(odbc::odbc(), .connection_string = "Driver={Microsoft Access Driver (*.mdb, *.accdb)}; DBQ=D:/BECMaster/BECMaster_fixing.accdb;")
plot.env <- dbReadTable(becmaster, "BECMaster_fixing_Env")
dbDisconnect(becmaster)
bgc.units<- dbConnect(
  odbc::odbc(),
  .connection_string = "Driver={Microsoft Access Driver (*.mdb, *.accdb)}; DBQ=D:/OneDrive - Government of BC/BECdb_Working/BECdb_ver13_2024.accdb;")
bgcv12 <- dbReadTable(bgc.units, "tblBGC_UnitsWorkingandArchive")
dbDisconnect(bgc.units)
bgcv13 <- bgcv12 %>% filter(is.na(VersionRetired)) %>% select(BGC_NoSpace, SiteClassificationStatus)

```
### Evaluate site series within each BGC

1.  Identify site series that have fewer than 5 plots (difficult to quantitatively analyse)

2.  Identify site series that have low diagnostic potential.

3.  Compare site series within each BGCs to identify site series below the minimal threshold to separate

Some units with few plots or low diagnostics fall out as singles in the first pass cluster analysis. These are reviewed and merging rules applied before re-running the cluster analysis.

## Prepare data for zonal comparison

```{r build pair.wise similarity matrix, echo=FALSE, message=FALSE, warning=FALSE}}

key.site.indicators <- c("POPUTRI", "LYSIAME", "GAULSHA", "OPLOHOR", "ELLIPYR","ATHYFIL", "RUBUSPE", "EQUIARV", "GYMNDRY", "VALESIT", "CASSMER", "LUETPEC", "POLYMUN", "STRUSPI", "RHODGRO", "EMPENIG")#,  "TIARELLA", "DRYOEXP" "PICESIT", )
reduced.exceptions <- c("SPHAGNUM", "CLADONIA", "CLADINA", "RACOMITR", "MNIUM")
# reduced.lifeforms = c(1,2)
reduced.lifeforms <- c(9, 10, 11)
### select units to run
#su2 <- su2 %>% filter(grepl('101', SiteUnit))# %>%
#  mutate(SiteUnit = gsub("\\.(1|2)$", "", SiteUnit))
# %>% filter(!grepl('ms',SiteUnit))
#fwrite(su2, "./CoastGuide_Forest_101_SU.csv")
tic()
vegsum.pairs <- do_pairwise(veg.dat2,
  su = su2, minimportance = 0.1, minconstancy = 60,
  noiseconstancy = 10,
  minplots = 1,  minor = 1,
  use.ksi = FALSE, ksi = key.site.indicators, ksi.value = 1.5,
  reduce.lifeform = FALSE, reduced.lifeforms = reduced.lifeforms, reduction = .1,
  reduced.exceptions = reduced.exceptions
)
toc()
xx <- vegsum.pairs %>%
  filter(Unit1 == "CWHws2_112a", Unit2 == "CWHws2_112b")

unit.compare <- vegsum.pairs %>%
  select(Unit1, Unit2, BEC.sim.min, BEC.sim.mean , BEC.sim.max, diff.ratio.x, diff.ratio.y, diff.ratio, nplots.x, nplots.y, unit.diag.sum.x, unit.diag.sum.y) %>% filter(nplots.x>0) %>% mutate(metric.diff = BEC.sim.max - BEC.sim.min) %>%
 distinct()
unit.compare$bgc1 <- stringr::word(unit.compare$Unit1, 1, sep = "\\_")
unit.compare$bgc2 <- stringr::word(unit.compare$Unit2, 1, sep = "\\_")

yy <- vegsum.pairs %>% 
  select(Unit1, Unit2, Species, diagnostic.potential.x, diagnostic.potential.y, diff.pts.x, diff.pts.y, sum.shared.diag,diff.tot.x, diff.tot.y,  diff.ratio.x, diff.ratio.y, BEC.sim.min,BEC.sim.mean) %>% 
  filter(Unit1 == "CWHws2_101", Unit2 == "CWHws2_110")
db <- "D:/BC_Correlation2_Vpro_2023/published_sorts/CoastGuide_Forested.accdb"
coast.units <- combined_su(db) %>% select(SiteUnit) %>% distinct
 dis.matrix <- bec_dist_matrix(unit.compare, distance = "BEC.sim.min") %>% as.data.frame %>% rownames_to_column("SiteUnit")
examine <- dis.matrix %>% filter(SiteUnit == "CWHvm1_101") %>% pivot_longer(- SiteUnit, names_to = "SiteUnit2", values_to = "BEC.sim.min") %>%
  filter(BEC.sim.min <= 0.4) %>% select(SiteUnit2, BEC.sim.min) %>% arrange(desc(BEC.sim.min))

```

## Cluster analysis and dendrogram of zonal ecosystems
This section performs a cluster analysis on the zonal ecosystems to confirm BGC subzone/variant designation. The dendrogram is split at 50% dissimilarity into chunks for ease of comparison.  
All subzones with the exception of the CWHms both separate from other subzones at an association level (20%), and have variants that cluster below the association threshold.
While the CWHvm1 links to other subzones at a higher level but an examination of the dissimilarity matrix shows that it also fits closely to the vm2 variants at 18% dissimilarity.
The 'problem' ms subzone sits intermediately between the ds and ws subzones in overall character. Historically the ms subzone was differentiated from the ws by commonality of Douglas-fir on the landscape. When the 101 is splitting into .1 (typic) and .2 (Fd) variations, the typic is intermixed with the CWHws variants bu the Fd variations fall closer to the CWHds or mm. 
We will treat the CWHms as a transition subzone characterized by BaHw & Fd common in some zonal sites. Azonal site series of the ms variants tend to cluster together into associations further suggesting that the ms variations are related and differentiated from the ws and ds subzones.

Minimum dissimilarity threshold to separate subassociations is set at 10% dissimilarity.
Any splits to the right of the red line should be considered for merging into the same site series. For zonal ecosystems, some recognized BGC variants do not separate at the subassociation level. However, in these cases the azonal ecosystems are different between the variants and support the retention of separate BGC units.

### Run Zonal comparison
Produce a cluster analysis of zonal ecosystems to confirm BGC subzone/variant designation. 
Export a csv file with the cluster membership for manual updating to hardwire zonal association groupings in further cluster analysis

```{r}
source("./_functions/_cluster_by_spp_group.R")

anal.groups <- fread("./clean_tabs/Forest_Analysis_Groups.csv") %>%
  group_by(Spp.group) %>%
  #filter(n_distinct(SiteUnit) > 2) %>%
  ungroup() %>% as.data.table

anal.groups[, SiteUnit := gsub("/", "_", gsub(" ", "", SiteUnit))]
anal.groups <- as.data.frame(anal.groups)
anal.groups <- anal.groups %>% mutate(Spp.group = 'All')
spp.groups <- unique(anal.groups$Spp.group)
#spp.groups = c("Coastal_High", "Coast") # "Boreal", "Coast", "Interior", "Mediterranean", "Subalpine", "Temperate"
#grp = "CwHw"
zonal.compare<- unit.compare %>% filter(grepl('101', Unit1), grepl('101', Unit2)) 


zonal_results <- cluster_by_spp_group(
  zonal.compare,
  anal.groups=NULL,
  cut.level = 0.7,
  combine.level = 0.2,
  include.low.diag = TRUE,
  low.diag.threshold = 20,
  include.few.plots = TRUE,
  few.plots.threshold = 4,
  output.file = "zonal_cluster_memberships.csv"
 )
xx <- fread("zonal_cluster_memberships.csv")## modify this file to hard code site series group membership
```


Step to hard code the merged site units from the review process of zonal
```{r merge reviewed singles, echo=FALSE}
source("./_functions/_assign_manual_cluster.R")
cluster.file = fread("./hierarchy/LMH77_zonal_assoc_memberships.csv") ## reviewed file

su_zonal <- assign_manual_cluster(su.tab = su2, cluster.file = cluster.file ,
                                 siteunit_col = "SiteUnit",
                                 new_name_col = "Association",
                                   use_last_step = FALSE)

```


## Cluster analysis and dendrogram of all site units



## Cluster analysis for all units


The agglomerative clustering algorithm AGNES successively groups site units based on dissimilarity. It successively merges site units from the bottom up (most similar units get grouped first). Because units or initial clusters may have near equal dissimilarity to neighbours in two directions, the algorithm may not be able to maintain an exact ordering of dissimilarity. We evaluate the cluster analysis using two metrics. 
1) The cophenetic correlation coefficient (CCC) evaluate how well a hierarchical clustering dendrogram preserves the original pairwise distances between observations. The closer CCC is to 1, the better it represents the original distance matrix. Lower numbers indicate that some branchlets of the dendrogram can be associated with more than one branch. 
2) The agglomerative coefficient (AC) is a metric that quantifies the strength of the clustering structure. The closer AC is to 1 indicates strong clustering structure and the observations are tightly grouped by low dissimilarity. This will be affected by the breadth/size of the analysis where a larger number of site units will tend to have lower AC values.

We chose to use the clustering method that maximizes the CCC. We tested a number of methods: complete, average, single, ward,  weighted, and flexible (at a wide range of settings). The "average" method consistently produced the highest cophenetic values so we applied this as the standard method for clustering.

In the dendrograms, the red line represents the minimum threshold for separating site units into separate subassociations. This is set at 10% dissimilarity, but in some BGCs we separate some site series to as low as 7% dissimilarity.
The green line represents the dissimilarity threshold for an association. The initial threshold is set at 20% based on review.


Probably the best approach is separate site units into already defined Orders or SubOrders based on tree species composition, then cluster within hierarchical unit. 

```{r build pair.wise similarity matrix, echo=FALSE, message=FALSE, warning=FALSE}}

key.site.indicators <- c("POPUTRI", "LYSIAME", "GAULSHA", "OPLOHOR", "ELLIPYR","ATHYFIL", "RUBUSPE", "EQUIARV", "GYMNDRY", "VALESIT", "CASSMER", "LUETPEC", "POLYMUN", "STRUSPI", "RHODGRO", "EMPENIG")#,  "TIARELLA", "DRYOEXP" "PICESIT", )
reduced.exceptions <- c("SPHAGNUM", "CLADONIA", "CLADINA", "RACOMITR", "MNIUM")
# reduced.lifeforms = c(1,2)
reduced.lifeforms <- c(9, 10, 11)
### select units to run
#su2 <- su2 %>% filter(grepl('101', SiteUnit))# %>%
#  mutate(SiteUnit = gsub("\\.(1|2)$", "", SiteUnit))
# %>% filter(!grepl('ms',SiteUnit))
#fwrite(su2, "./CoastGuide_Forest_101_SU.csv")
tic()
vegsum.pairs <- do_pairwise(veg.dat2, su.field = "Step1_Group",
  su = su_zonal, minimportance = 0.1, minconstancy = 60,
  noiseconstancy = 10,
  minplots = 1,  minor = 1,
  use.ksi = TRUE, ksi = key.site.indicators, ksi.value = 1.5,
  reduce.lifeform = TRUE, reduced.lifeforms = reduced.lifeforms, reduction = .1,
  reduced.exceptions = reduced.exceptions
)
toc()

unit.compare <- vegsum.pairs %>%
  select(Unit1, Unit2, BEC.sim.min, BEC.sim.mean , BEC.sim.max, diff.ratio.x, diff.ratio.y, diff.ratio, nplots.x, nplots.y, unit.diag.sum.x, unit.diag.sum.y) %>% filter(nplots.x>0) %>% mutate(metric.diff = BEC.sim.max - BEC.sim.min) %>%
 distinct()
unit.compare$bgc1 <- stringr::word(unit.compare$Unit1, 1, sep = "\\_")
unit.compare$bgc2 <- stringr::word(unit.compare$Unit2, 1, sep = "\\_")

unit.compare <- vegsum.pairs %>% filter(nplots.x > 0, Unit1 != Unit2) %>%  
  select(Unit1, Unit2, Species, BEC.sim.min, nplots.x, unit.diag.sum.x) %>% 
  distinct()

```
```{r site series with too few plots, echo=FALSE}
#| label: tab-too-few-plots
#| fig-cap: "Site Units with Fewer than 5 Plots"
#| warning: false
#| fig-align: "left"

compared <- unit.compare
ss_too.few <- compared %>%
  select(Unit1, nplots.x) %>% 
  filter(nplots.x < 5) %>% 
  rename("Number of Plots" = nplots.x, "Site Unit" = Unit1) %>% 
  distinct()
# low.num <- gt::as_gtable(gt::gt(ss_too.few) %>% gt::fmt_number(decimals = 0)|> gt::tab_options(table.font.size = 10), plot = TRUE)

gt::gt(ss_too.few) %>% gt::fmt_number(decimals = 0)|> gt::tab_options(table.font.size = 10)
```

```{r site series with low diagnostic potential, echo=FALSE}
#| label: tab-low-diagnostic
#| fig-cap: "Site Units with Low Diagnostic Potential"
#| warning: false
#| fig-align: "left"
ss_low.diag <- compared %>%
  select(Unit1, unit.diag.sum.x)  %>% 
  filter(unit.diag.sum.x < 30) %>% 
  rename("Diagnostic Potential" = unit.diag.sum.x, "Site Unit" = Unit1) %>%
  distinct()
# low.diag.pot <- gt::as_gtable(gt::gt(ss_low.diag) %>% gt::fmt_number(decimals = 2)|> gt::tab_options(table.font.size = 10), plot = TRUE)
gt::gt(ss_low.diag) %>% gt::fmt_number(decimals = 2)|> gt::tab_options(table.font.size = 10)
# require(gridExtra)
# grid.arrange(low.num, low.diag.pot, ncol = 2)
```

```{r}
source("./_functions/_evaluate_clustering_by_group.R")


anal.groups <- fread("./clean_tabs/Forest_Analysis_Groups.csv")
#unit.compare <- fread("./clean_tabs/Unit_Comparison_Table.csv")

clustering_results <- evaluate_clustering_by_group(
  unit.compare = unit.compare,
  anal.groups = anal.groups,
  clst_method = "average")

gt::gt(clustering_results) %>%
  gt::fmt_number(columns = c("CCC", "AC"), decimals = 3) |>
  gt::tab_options(table.font.size = 10) |>
  gt::cols_label(
    CCC = "Cophenetic Correlation",
    AC = "Agglomerative Coefficient"
  )

```



### flag units with few plots or low diagnostics to remove before running clustering or to view within dendrogram.
```{r site dendrogram split, echo=FALSE}
few.plots.threshold = 5
low.diag.threshold = 30

    unit.compare2 <- unit.compare
    include.few.plots <- TRUE
    if (include.few.plots) {
    unit.few <- unit.compare2 %>%
        filter(nplots.x < few.plots.threshold) %>%
        select(Unit1) %>% #, nplots.x) %>%
        distinct()}
    include.low.diag <- TRUE
    if (include.low.diag) {
      unit.simple <- unit.compare2 %>%
        filter(unit.diag.sum.x < low.diag.threshold) %>%
        select(Unit1) %>% #, unit.diag.sum.x) %>%
        distinct()
    }
    unit.poor <- bind_rows(unit.few, unit.simple) 
    
    unit.compare.poor <- unit.compare %>% filter(Unit1 %in% unit.poor$Unit1 & Unit2 %in% unit.poor$Unit1)
    unit.compare.good <- unit.compare %>% filter(!Unit1 %in% unit.poor$Unit1 & !Unit2 %in% unit.poor$Unit1) 

```


Stepwise cluster lumping
Allows hardwired groups to be fed in (for example from the zonal comparison above)
```{r}
source("./_functions/_stepwise_cluster_lumping.R")

cluster.file <- fread("./hierarchy/LMH77_zonal_assoc_memberships.csv")

unit_lineage <- stepwise_cluster_lumping(
  unit.compare = unit.compare.good,
  combine.level = 0.2,
  max.steps = 20,
  stop.no.change = TRUE,
  verbose = TRUE,
  initial.groups = cluster.file
)

#su_updated <- left_join(su2, unit_lineage, by = c("SiteUnit" = "OriginalUnit")) %>% distinct %>% mutate(Association = Step3_Group) %>% select(PlotNumber, SiteUnit, Association)

ss.unique <- su2 %>% select(SiteUnit) %>% distinct()

su_unit_lineage <- left_join(ss.unique, unit_lineage, by = c("SiteUnit" = "OriginalUnit")) %>% mutate(Set_Association = Step0_Group, Association_modelled = Step3_Group) %>% 
  select(SiteUnit, Set_Association, Association_modelled) #%>% mutate(Association_modelled = sub(".*_", "", Association_modelled))
su.no.group <- su_unit_lineage %>% filter(is.na(Association_modelled)) %>% select(SiteUnit, Set_Association) %>% mutate(Association_modelled = "no group") %>%
  mutate(SiteUnit = paste0(SiteUnit, "_no_group")) %>% distinct()

su_unit_lineage <- su_unit_lineage %>% filter(!is.na(Association_modelled))

su_updated <- left_join(su_unit_lineage, su2, , by = c("SiteUnit" = "SiteUnit")) %>% select(PlotNumber, SiteUnit, Association_modelled)

```

#### Export vegetation summary tables of site units by prospective associations

```{r build veg guide summary and export to excel, echo = FALSE, warning=FALSE, message=FALSE}
require(openxlsx)
require(tictoc)
library(stringr)
data.path = "D:/OneDrive - Government of BC/GitHub_data"
author <- "test.assoc2"
#assoc.list <- coast.units %>% filter(!is.na(Association_clst)) %>% group_by(Association_clst) %>% mutate(n=n()) %>% filter(n>2) %>% distinct(Association_clst) %>% pull(Association_clst)
assoc.list <- su_updated %>% filter(!is.na(Association_modelled)) %>%  select(SiteUnit, Association_modelled) %>% distinct() %>% group_by(Association_modelled) %>% mutate(n=n()) %>% filter(n>2) %>%  distinct(Association_modelled) %>% pull(Association_modelled)
#assoc.choose = "Step3_Grp1"
vegsum.wbk <- createWorkbook()
for(assoc.choose in assoc.list){
#assoc.choose = "assoc-13"
assoc <- su_updated %>% filter(Association_modelled %in% assoc.choose) %>% select(SiteUnit, Association_modelled) %>% mutate(SiteUnit = gsub(" ", "", SiteUnit)) %>% mutate(SiteUnit = str_replace(SiteUnit, "/", "_"))
su.assoc <- left_join(assoc, su, by = "SiteUnit") %>%  mutate(SiteUnit = str_replace(SiteUnit, "b$|a$", "")) %>% distinct()
veg.dat.assoc <- veg.dat2 %>% filter(PlotNumber %in% su.assoc$PlotNumber)
# vegsum.wbk <- createWorkbook()
# #bgc.choose = "CDFmmtab2"
# #for(bgc.choose in bgc.list){
vegSum <-
  create_veg_sum_all(vdat = veg.dat.assoc, siteUnits = su.assoc, strata.by = "Lifeform")

indic.order <- build_species_ordering_hier(vdat = veg.dat.assoc, vsum = vegSum, code.lump=lump, siteUnits = su.assoc, hier.level = "Association_modelled")
veg.sum.table <- format_veg_table2(vsum = vegSum, spp=taxon.lifeform)
openxlsx::addWorksheet(vegsum.wbk, sheetName = assoc.choose)
openxlsx::writeData(vegsum.wbk, sheet = assoc.choose, veg.sum.table)
}

saveWorkbook(vegsum.wbk, paste0("./vegsum.tables/LMH77_draft_assoc_tables_v4_", author, ".xlsx"), overwrite = TRUE)

```



Run again to see if any of the initial groups now merge with other associations

```{r}
key.site.indicators <- c("POPUTRI", "LYSIAME", "GAULSHA", "OPLOHOR", "ELLIPYR","ATHYFIL", "RUBUSPE", "EQUIARV", "GYMNDRY", "VALESIT", "CASSMER", "LUETPEC", "POLYMUN", "STRUSPI", "RHODGRO", "EMPENIG")#,  "TIARELLA", "DRYOEXP" "PICESIT", )
reduced.exceptions <- c("SPHAGNUM", "CLADONIA", "CLADINA", "RACOMITR", "MNIUM")
# reduced.lifeforms = c(1,2)
reduced.lifeforms <- c(9, 10, 11)
### select units to run
#su2 <- su2 %>% filter(grepl('101', SiteUnit))# %>%
#  mutate(SiteUnit = gsub("\\.(1|2)$", "", SiteUnit))
# %>% filter(!grepl('ms',SiteUnit))
#fwrite(su2, "./CoastGuide_Forest_101_SU.csv")
tic()
vegsum.pairs <- do_pairwise(veg.dat2, su.field = "Association_modelled",
  su = su_updated, minimportance = 0.1, minconstancy = 60,
  noiseconstancy = 10,
  minplots = 1,  minor = 1,
  use.ksi = TRUE, ksi = key.site.indicators, ksi.value = 1.5,
  reduce.lifeform = TRUE, reduced.lifeforms = reduced.lifeforms, reduction = .1,
  reduced.exceptions = reduced.exceptions
)
toc()

unit.compare.assoc <- vegsum.pairs %>%
  select(Unit1, Unit2, BEC.sim.min, BEC.sim.mean , BEC.sim.max, diff.ratio.x, diff.ratio.y, diff.ratio, nplots.x, nplots.y, unit.diag.sum.x, unit.diag.sum.y) %>% filter(nplots.x>0) %>% mutate(metric.diff = BEC.sim.max - BEC.sim.min) %>%
 distinct()
unit.compare$bgc1 <- stringr::word(unit.compare$Unit1, 1, sep = "\\_")
unit.compare$bgc2 <- stringr::word(unit.compare$Unit2, 1, sep = "\\_")

unit.compare.assoc<- vegsum.pairs %>% filter(nplots.x > 0, Unit1 != Unit2) %>%  
  select(Unit1, Unit2, Species, BEC.sim.min, nplots.x, unit.diag.sum.x) %>% 
  distinct()

association_results <- cluster_by_spp_group(
  unit.compare.assoc,
  anal.groups=NULL,
  cut.level = 0.7,
  combine.level = 0.2,
  include.low.diag = TRUE,
  low.diag.threshold = 20,
  include.few.plots = TRUE,
  few.plots.threshold = 4,
  output.file = "initial_association_memberships.csv"
 )
zz <- fread("initial_association_memberships.csv")
```



```{r}

library(pheatmap)
dis.matrix <- bec_dist_matrix(unit.compare3) 
pheatmap(dis.matrix, clustering_method = "average",
  fontsize_row = 6,  # adjust for row labels
  fontsize_col = 6   # adjust for column labels
)
```

#### Report units that are singles below the association threshold

```{r tables of singles units, echo=FALSE}
singles.poor <- as.data.frame(singles) %>% filter(grepl('nplot|lowdiag', SiteUnit))
singles.good <- as.data.frame(singles) %>% filter(!grepl('nplot|lowdiag', SiteUnit))

gt::gt(singles.good) %>%
  gt::tab_header(
    title = paste0(gt::md("Units ungrouped at cut.level = "), cut.level),
    subtitle = gt::md("*Units with sufficient plots and diagnostics*")
  )  %>%
  gt::tab_options(
   table.font.size = gt::px(10)
  )
gt::gt(singles.poor) %>%
  gt::tab_header(
    title = paste0(gt::md("Units ungrouped at cut.level = "), cut.level),
    subtitle = gt::md("*Units with deficient plots and diagnostics*")
  )  %>%
  gt::tab_options(
    table.font.size = gt::px(10)
  )


```

#### 

```{r pull associations from dendrogram at cut.level, echo=FALSE}

assocs <- cluster_groups(unit.compare, cut.level = 0.17, minclus = 0, group.label = "Association_clst")
assocs <- full_join(assocs, merge ) %>% filter(!SiteUnit %in% mergedUnit) %>% 
  mutate(Association_clst = ifelse(!is.na(mergedUnit), mergedUnit, Association_clst)) %>% 
  mutate(mergedUnit = ifelse(is.na(mergedUnit), SiteUnit, mergedUnit)) %>% mutate(Association_clst = paste0("assoc-", Association_clst))
alliances <- cluster_groups(unit.compare, cut.level = 0.35, minclus = 0, group.label = "Alliance.clst")
alliances  <- left_join(assocs, alliances ,  by = c("mergedUnit"="SiteUnit"), keep = TRUE) %>% select(Alliance.clst, Association_clst, SiteUnit.x, mergedUnit)%>% mutate(Alliance.clst = paste0("all-", Alliance.clst))
orders <- cluster_groups(unit.compare, cut.level = 0.8, minclus = 0, group.label = "Order.clst")
orders  <- left_join(alliances, orders,  by = c("mergedUnit"="SiteUnit"), keep = TRUE) %>% select(-SiteUnit, Order.clst, Alliance.clst, Association_clst, SiteUnit.x, mergedUnit)%>% mutate(Order.clst = paste0("order-", Order.clst))
classes <- cluster_groups(unit.compare, cut.level = .99, minclus = 0, group.label = "Class.clst")
classes  <- left_join(orders,classes,  by = c("mergedUnit"="SiteUnit"), keep = TRUE) %>% select(SiteUnit.x, Association_clst, Alliance.clst, Order.clst, Class.clst, mergedUnit)%>% mutate(Class.clst = paste0("class-", Class.clst))

subassocs <- cluster_groups(unit.compare, cut.level = 0.07, minclus = 0, group.label = "SubAssociation_clst")
subassocs <- full_join(subassocs, merge ) %>% filter(!SiteUnit %in% mergedUnit) %>% 
  mutate(SubAssociation_clst = ifelse(!is.na(mergedUnit), mergedUnit, SubAssociation_clst)) %>% 
  mutate(mergedUnit = ifelse(is.na(mergedUnit), SiteUnit, mergedUnit)) %>% mutate(SubAssociation_clst = paste0("subass-", SubAssociation_clst))
allunits <-  left_join(classes, subassocs,  by = c("mergedUnit"="SiteUnit"), keep = TRUE) %>% select(SiteUnit.x, SubAssociation_clst, Association_clst, Alliance.clst, Order.clst, Class.clst)#%>% mutate(Class.clst = paste0("class-", Class.clst))
su.temp <- su %>% select(PlotNumber, SiteUnit.orig, SiteUnit)
su3 <- left_join(su.temp, su, by = "PlotNumber")

#, by = c("SiteUnit" = "SiteUnit.y")) %>% select(PlotNumber, SiteUnit, Association, Alliance, Order, Class)
#singles <- assocs %>% filter(Association == 0)
## if minclus = 2 then group 0 are singles for review
## need to add back in the manually grouped site units
## need to change the accepted singles from zero to other association number if for review
# db <- "D:/BC_Correlation2_Vpro_2023/CoastGuide_Forested.accdb"
# su.coast <- combined_su(db)
# su.coast <- su.coast %>%
#   filter(!grepl('101a.2|101b.2|low|-S|add|nudum|poor|yc|_W|_F|ys|moved|X|unplaced', SiteUnit))
# su.coast <- su.coast %>% mutate(SiteUnit = str_replace(SiteUnit, "b$|a$", "")) %>% distinct()
# su.coast <- su.coast %>% filter(!bgc %in% c('CWHvh3', 'CWHwh1', 'CWHwh2', 'CWHvh3', 'MHwh'))
coast.units.su <- left_join(allunits, su3,  by = c("SiteUnit.x" = "SiteUnit.x")) %>% select(PlotNumber, SiteUnit.x, SiteUnit.orig.x, SubAssociation_clst,Association_clst, Alliance.clst, Order.clst, Class.clst, bgc) %>% rename(SiteUnit = SiteUnit.orig.x) %>% 
  group_by(SiteUnit) %>%  mutate(n = n()) %>% ungroup
# interior.units <- orders %>% filter(!Association == 0) %>%
#    filter(!SiteUnit.y %in% coast.units$SiteUnit) %>%
#   filter(Association %in% coast.units$Association)%>%
#   left_join(su) %>%
#   select(PlotNumber, SiteUnit, Association, Alliance, Order)
#coast.units.su <- rbind(coast.units, interior.units)
coast.units <- coast.units.su %>% select(-PlotNumber) %>% distinct 
colnames(coast.units) <- gsub('[.]', '_', colnames(coast.units))
fwrite(coast.units.su, "./clean_data/Association_Units_v1.csv")
fwrite(coast.units, "./clean_data/Coast_Hierarchical_Clusters_v1_clean.csv")
unit.counts <- coast.units %>% summarise_all(n_distinct)
gt::gt(unit.counts)
bgc.units<- dbConnect(
  odbc::odbc(),
  .connection_string = "Driver={Microsoft Access Driver (*.mdb, *.accdb)}; DBQ=D:/OneDrive - Government of BC/BECdb_Working/BECdb_ver13_2024.accdb;")
dbWriteTable(bgc.units, "LMH77_hierunits_v2", coast.units, overwrite = TRUE, batch_rows = 1)
dbDisconnect(bgc.units)
```

#### Export vegetation summary tables of site units by prospective associations

```{r build veg guide summary and export to excel, echo = FALSE, warning=FALSE, message=FALSE}
require(openxlsx)
require(tictoc)
library(stringr)
data.path = "D:/OneDrive - Government of BC/GitHub_data"
author <- "test.assoc2"
assoc.list <- coast.units %>% filter(!is.na(Association_clst)) %>% group_by(Association_clst) %>% mutate(n=n()) %>% filter(n>2) %>% distinct(Association_clst) %>% pull(Association_clst)

vegsum.wbk <- createWorkbook()
for(assoc.choose in assoc.list){
#assoc.choose = "assoc-13"
assoc <- coast.units.su %>% filter(Association_clst %in% assoc.choose) %>% select(SiteUnit, Association_clst) %>% mutate(SiteUnit = gsub(" ", "", SiteUnit)) %>% mutate(SiteUnit = str_replace(SiteUnit, "/", "_"))
su.assoc <- left_join(assoc, su, by = "SiteUnit") %>%  mutate(SiteUnit = str_replace(SiteUnit, "b$|a$", "")) %>% distinct()
veg.dat.assoc <- veg.dat2 %>% filter(PlotNumber %in% su.assoc$PlotNumber)
# vegsum.wbk <- createWorkbook()
# #bgc.choose = "CDFmmtab2"
# #for(bgc.choose in bgc.list){
vegSum <-
  create_veg_sum_all(vdat = veg.dat.assoc, siteUnits = su.assoc, strata.by = "Lifeform")

indic.order <- build_species_ordering_hier(vdat = veg.dat.assoc, vsum = vegSum, code.lump=lump, siteUnits = su.assoc, hier.level = "Association_clst")
veg.sum.table <- format_veg_table2(vsum = vegSum, spp=taxon.lifeform)
openxlsx::addWorksheet(vegsum.wbk, sheetName = assoc.choose)
openxlsx::writeData(vegsum.wbk, sheet = assoc.choose, veg.sum.table)
}

saveWorkbook(vegsum.wbk, paste0("./vegsum.tables/LMH77_draft_assoc_tables_v3_", author, ".xlsx"), overwrite = TRUE)

```

```{r build veg guide summary for alliances, echo = FALSE, warning=FALSE, message=FALSE}
# require(openxlsx)
# require(tictoc)
# library(stringr)
# data.path = "D:/OneDrive - Government of BC/GitHub_data"
# author <- "test.alliance2"
# #coast.units <- coast.units %>% mutate(Alliance.clst = Alliance.clst)
# assoc.list <- coast.units %>% filter(!is.na(Alliance.clst)) %>% group_by(Alliance.clst) %>% mutate(n=n()) %>% filter(n>2, n<15) %>% distinct(Alliance.clst) %>% pull(Alliance.clst)
# 
# vegsum.wbk <- createWorkbook()
# for(assoc.choose in assoc.list){
# #assoc.choose = "all-42"
# assoc <- coast.units.su %>% filter(Alliance.clst %in% assoc.choose) %>% select(SiteUnit, Alliance.clst) %>% mutate(SiteUnit = gsub(" ", "", SiteUnit)) %>% mutate(SiteUnit = str_replace(SiteUnit, "/", "_"))
# su.assoc <- left_join(assoc, su, by = "SiteUnit") %>%  mutate(SiteUnit = str_replace(SiteUnit, "b$|a$", "")) %>% distinct() 
# veg.dat.assoc <- veg.dat2 %>% filter(PlotNumber %in% su.assoc$PlotNumber)
# # vegsum.wbk <- createWorkbook()
# # #bgc.choose = "CDFmmtab2"
# # #for(bgc.choose in bgc.list){
# vegSum <-
#   create_veg_sum_all(vdat = veg.dat.assoc, siteUnits = su.assoc, strata.by = "Lifeform")
# tic()
# indic.order <- build_species_ordering_hier(vdat = veg.dat.assoc, vsum = vegSum, code.lump=lump, siteUnits = su.assoc, hier.level = "Alliance.clst")
# toc()
# veg.sum.table <- format_veg_table2(vsum = vegSum, spp=taxon.lifeform)
# openxlsx::addWorksheet(vegsum.wbk, sheetName = assoc.choose)
# openxlsx::writeData(vegsum.wbk, sheet = assoc.choose, veg.sum.table) 
# }
# 
# saveWorkbook(vegsum.wbk, paste0("./vegsum.tables/LMH77_draft_hierarchy_tables_", author, ".xlsx"), overwrite = TRUE)

```

Merge in hierarchical cluster numbers to BECdb tables to help guide naming of units

```{r add in association code}
# table <- "tblBEC_SiteSeries_LMH77_forest"
# becdb <- dbConnect(odbc::odbc(), .connection_string = "Driver={Microsoft Access Driver (*.mdb, *.accdb)}; DBQ=D:/OneDrive - Government of BC/BECdb_Working/BECdb_ver13_2024.accdb;")
# SS_v13 <- dbReadTable(becdb, table)
# SS_v13_2 <- setDT(SS_v13)[setDT(coast.units), `:=`(Association_Code = Association_clst, Alliance = Alliance.clst, Order = Order.clst, Class = Class.clst), on = c("SS_Label" = "SiteUnit")]
# dbRemoveTable(becdb, table)
# dbWriteTable(becdb, table, SS_v13_2, append = TRUE, batch_rows = 1)
# dbDisconnect(becdb)

```

Convert to a hierarchy structure

```{r to Vpro hierarchy, echo=FALSE}
# coast.hier <- coast.units %>% mutate(Formation = "not_set", Suborder = "", Suball = "" , Subass = "" , Facies = "" , Working = "") %>% rowid_to_column("ID") %>%  select(ID, Formation, Class, Order, Suborder, Alliance, Suball, Association, Subass, Facies, Working, SiteUnit) %>% distinct %>% rename(Assoc = Association) %>%  mutate_if(is.numeric, as.character) %>%  mutate(ID = as.integer(ID)) %>% as.data.table
# levelNames <- c("Formation", "Class", "Order", "Suborder", "Alliance", "Suball", "Assoc", "Subass", "Facies", "Working", "SiteUnit")
# testReverse <- tableToTree(hierWide = copy(test),levelNames) ## convert matrix to tree
# testReverse <-testReverse %>% mutate(Parent = ifelse(Parent == 0, NA, Parent)) %>% distinct(Name, .keep_all = TRUE)
# fwrite(testReverse, "./outputs/UpdatedCoastHierarchy_v13_1.csv")
```



#### some testing of cluster methods evaluate the cophonetic and cluster ability of different methods

```{r split dendrogram1, echo=FALSE}
# evaluate_gaverage_grid <- function(unit.compare) {
#   # Create parameter grid
#   param_grid <- expand.grid(
#     alpha = seq(0, 1, by = 0.1),
#     beta  = seq(0.0, 1, by = 0.1),
#     gamma = seq(0.0, 1, by = 0.1),
#     stringsAsFactors = FALSE
#   )
# 
#   # Distance matrix
#   dis.matrix <- bec_dist_matrix(unit.compare)
#   dis.dis <- as.dist(dis.matrix)
# 
#   results <- param_grid
#   results$cophenetic_corr <- NA
#   results$agglomerative_coeff <- NA
# 
#   # Loop through each parameter combination
#   for (i in 1:nrow(param_grid)) {
#     par.method <- c(param_grid$alpha[i], param_grid$alpha[i], param_grid$beta[i], param_grid$gamma[i])
#     
#     model <- tryCatch({
#       agnes(dis.matrix, diss = TRUE, stand = TRUE, method = "gaverage", par.method = par.method)## can replace with "flexible" method
#     }, error = function(e) NULL)
# 
#     if (!is.null(model)) {
#       results$cophenetic_corr[i] <- round(cor(dis.dis, cophenetic(model)), 3)
#       results$agglomerative_coeff[i] <- round(model$ac, 3)
#     }
#   }
# 
#   return(results)
# }
# 
# library(ggplot2)
# library(tidyr)
# library(dplyr)
# 
# gavg_results <- evaluate_gaverage_grid(unit.compare)
# 
# # Plot cophenetic correlation as a heatmap
# ggplot(gavg_results, aes(x = beta, y = gamma, fill = cophenetic_corr)) +
#   facet_wrap(~ alpha, labeller = label_bquote(alpha == .(alpha))) +
#   geom_tile(color = "white") +
#   scale_fill_viridis_c(option = "C", name = "Cophenetic\nCorrelation") +
#   labs(title = "CCC Across Generalized Average Linkage Parameters",
#        x = "β", y = "γ") +
#   theme_minimal(base_size = 14)
```

```{r split dendrogram2, echo=FALSE}
# library(cluster)
# library(dplyr)
# 
# evaluate_flexible_clustering <- function(unit.compare, par_seq = seq(0, 1, by = 0.05)) {
#   results <- data.frame(par.method = numeric(),
#                         agglomerative_coeff = numeric(),
#                         cophenetic_corr = numeric())
#   
#   for (p in par_seq) {
#     #ss_clst <- agnes(dis.matrix, diss = TRUE, stand = TRUE, method = "flexible", par.method = p)
#     ss_clst <- agnes(dis.matrix, diss = TRUE, stand = TRUE, method = "flexible", par.method = p)
#     cophenetic_corr <- cor(dis.dis, cophenetic(ss_clst))
#     agglom_coeff <- round(ss_clst$ac, 3)
#     # cophenetic_corr2 <- cor(dis.dis, cophenetic(ss_clst2))
#     # agglom_coeff2 <- round(ss_clst2$ac, 3)
#     
#     results <- rbind(results, data.frame(par.method = p,
#                                          agglomerative_coeff = agglom_coeff,
#                                          cophenetic_corr = round(cophenetic_corr, 3)))
#   }
#   return(results)
# }
# cluster_eval <- evaluate_flexible_clustering(unit.compare = unit.compare)
# # Convert to long format for faceted plotting
# cluster_eval_long <- cluster_eval %>%
#   pivot_longer(cols = c(agglomerative_coeff, cophenetic_corr),
#                names_to = "metric", values_to = "value")
# 
# # Plot both metrics
# ggplot(cluster_eval_long, aes(x = par.method, y = value, color = metric)) +
#   geom_line(size = 1.2) +
#   geom_point(size = 2.5) +
#   scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1)) +
#   scale_color_manual(values = c("#1b9e77", "#d95f02")) +
#   labs(
#     title = "Clustering Evaluation Across par.method Settings",
#     x = "par.method (flexible clustering penalty)",
#     y = "Metric Value",
#     color = "Metric"
#   ) +
#   theme_minimal(base_size = 14) +
#   theme(legend.position = "top")
```